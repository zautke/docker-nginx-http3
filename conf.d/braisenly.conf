server {
    listen 80;
    listen [::]:80;
    server_name braisenly.com *.braisenly.com lukezautke.com *.lukezautke.com;

    # Allow certbot challenge requests
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files $uri =404;
        allow all;

        # Add headers for debugging
        add_header Content-Type text/plain;
        add_header X-Acme-Debug "Challenge file path: $document_root$uri";

        # Disable any caching
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";

        # Remove security headers for this location
        more_clear_headers 'X-Frame-Options';
        more_clear_headers 'Content-Security-Policy';
        more_clear_headers 'X-Content-Type-Options';
        more_clear_headers 'X-XSS-Protection';
        more_clear_headers 'Server';
        more_clear_headers 'X-Powered-By';
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    # quic and http/3
    listen 443 quic reuseport;

    # http/2 and http/1.1
    listen 443 ssl;
    http2 on;
    server_name braisenly.com *.braisenly.com lukezautke.com *.lukezautke.com;

    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/braisenly.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/braisenly.com/privkey.pem;

    # TLSv1.3 is required for QUIC.
    ssl_protocols TLSv1.2 TLSv1.3;

    # 0-RTT QUIC connection resumption
    ssl_early_data on;

    # Add Alt-Svc header to negotiate HTTP/3.
    add_header alt-svc 'h3=":443"; ma=86400';

    location /up {
        root   /static;

        gzip_static on;
        brotli_static on;

        expires 1d;
    }

    # HTTP/3 specific settings
    add_header alt-svc 'h3=":443"; ma=86400';
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    # Health check endpoint
    location /marco {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'polo';
    }

    location / {
        root /var/www/html;
        index index.html;
        try_files $uri $uri/ /index.html;
    }
}
