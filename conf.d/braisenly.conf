 server {
    #if ($host = www.braisenly.com) {
    #    return 301 https://$host$request_uri;
    #} # managed by Certbot


    #if ($host = braisenly.com) {
    #    return 301 https://$host$request_uri;
    #} # managed by Certbot
    listen 80;
    listen [::]:80;

    server_name braisenly.com www.braisenly.com;

    location /.well-known/acme-challenge/ {
      root /var/www/html;
    }

    location / {
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;

    server_name braisenly.com www.braisenly.com;

    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout 10m;

    #ssl_certificate /etc/letsencrypt/live/braisenly.com/fullchain.pem; # managed by Certbot
    #ssl_certificate_key /etc/letsencrypt/live/braisenly.com/privkey.pem; # managed by Certbot
    #ssl_trusted_certificate /etc/letsencrypt/live/braisenly.com/chain.pem;

    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers on;

    # Add security headers
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";

    # root /var/www/lab/dist;
    # index index.html;

    #location ~* \.(css|js|jpg|jpeg|png|gif|ico)$ {
    #    root /path/to/static/files;
    #    try_files $uri $uri/ =404;
    #}
    #location /graphql {
    #    proxy_pass http://localhost:5001;
    #    proxy_set_header Host $host;
    #    proxy_set_header X-Real-IP $remote_addr;
    #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #    # Add custom CORS headers using the allowed_origin variable
    #    add_header Access-Control-Allow-Origin $allowed_origin;
    #    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
    #    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin";
    #    add_header Access-Control-Allow-Credentials "true";
    #    # Handle OPTIONS requests
    #    if ($request_method = OPTIONS) {
    #        add_header Access-Control-Allow-Origin $allowed_origin;
    #        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
    #        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin";
    #        add_header Content-Length 0;
    #        add_header Content-Type text/plain;
    #        return 204;
    #    }
    #}
    location /graphql {
      proxy_pass http://localhost:5001/graphql;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 10s;
      proxy_connect_timeout 10s;
      proxy_send_timeout 10s;

      # Define Access-Control-Allow-Origin for braisenly.com
      set $allowed_origin "https://braisenly.com";

      # Add custom CORS headers
      add_header Access-Control-Allow-Origin $allowed_origin;
      add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
      add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin";
      add_header Access-Control-Allow-Credentials "true";

      # Handle OPTIONS requests
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $allowed_origin;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With, Accept, Origin";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
      }
    }


    location /pgadmin4/ {
      proxy_set_header X-Script-Name /pgadmin4;
      proxy_set_header X-Scheme $scheme;
      proxy_set_header Host $host;
      proxy_pass http://localhost:5050/;
      proxy_redirect off;
    }

    location _next/ {
      alias /srv/udemii-fe/.next/;
      expires 30d;
      access_log on;
    }

    location ~ \.php$ {
      include snippets/fastcgi-php.conf;
      fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
    }

    location / {
      proxy_pass http://localhost:3000;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;
    }

    location /api {
      proxy_pass http://127.0.0.1:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /socket {
      proxy_pass http://127.0.0.1:6000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
    }

    location ~ /\.well-known/acme-challenge {
      allow all;
    }

    location /marco {
      #access_log off;
      error_log off;
      add_header 'Content-Type' 'application/json charset=UTF-8';
      return 200 ' {
        "message": "polo"
      }
      ';
    }

    location /health {
      #access_log off;
      error_log off;
      return 200 'ok';
    }
  }
