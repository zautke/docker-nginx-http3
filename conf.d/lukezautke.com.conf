server {
    listen 80 default_server;
    server_name lukezautke.com *.lukezautke.com;

    # Allow certbot challenge requests
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/html;
        try_files $uri =404;
        allow all;

        # Add headers for debugging
        add_header Content-Type text/plain;
        add_header X-Acme-Debug "Challenge file path: $document_root$uri";

        # Disable any caching
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";

        # Remove security headers for this location
        more_clear_headers 'X-Frame-Options';
        more_clear_headers 'Content-Security-Policy';
        more_clear_headers 'X-Content-Type-Options';
        more_clear_headers 'X-XSS-Protection';
        more_clear_headers 'Server';
        more_clear_headers 'X-Powered-By';
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    # QUIC for HTTP/3 with different options than braisenly.conf
    listen 443 quic reuseport;

    # HTTP/2 and HTTP/1.1 over TLS with default_server flag
    listen 443 ssl default_server;
    http2 on;

    server_name lukezautke.com *.lukezautke.com;

    # SSL configuration - use the braisenly.com certificate
    ssl_certificate /etc/letsencrypt/live/braisenly.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/braisenly.com/privkey.pem;

    # TLSv1.3 is required for QUIC.
    ssl_protocols TLSv1.2 TLSv1.3;

    # 0-RTT QUIC connection resumption
    ssl_early_data on;

    # HTTP/3 specific settings
    add_header alt-svc 'h3=":443"; ma=86400';
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Fallback for maintenance or when upstream is down
    error_page 502 503 504 /maintenance.html;

    # Location for fallback maintenance page
    location = /maintenance.html {
        root /var/www/html;
        internal;
    }

    location / {
      proxy_pass http://host.docker.internal:4000;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_cache_bypass $http_upgrade;

      # Add error handling
      proxy_next_upstream error timeout http_502 http_503 http_504;
      proxy_connect_timeout 5s;
      proxy_read_timeout 30s;
    }

    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'OK';
    }

    # Health check endpoint
    location /marco {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'polo';
    }
}
